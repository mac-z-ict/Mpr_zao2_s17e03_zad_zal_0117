package dao;

import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

import dao.mappers.IMapResultSetToEntity;
import dao.uow.IUnitOfWork;
import domain.Permission;
import domain.Role;
import domain.RolePermission;

public class RolePermissionRepository extends RepositoryBase<RolePermission> implements IRolePermissionRepository {
	
	public static final String TABLE_NAME = "role_permission";
	private static final String CREATE_TABLE_QUERY = "CREATE TABLE " + TABLE_NAME +" ("
			+ "id bigint GENERATED BY DEFAULT AS IDENTITY,"
			+ "role_id bigint,"
			+ "permission_id bigint"
			+ ")";
	private static final String INSERT_QUERY = "INSERT INTO " + TABLE_NAME + "(role_id, permission_id) VALUES(?,?)";
	private static final String UPDATE_QUERY = "UPDATE " + TABLE_NAME + " SET role_id = ?, permission_id = ? WHERE id = ?";

	public RolePermissionRepository(Connection connection, IMapResultSetToEntity<RolePermission> mapper, IUnitOfWork uow) {
		super(connection, mapper, uow);
	}

	@Override
	public List<Role> byPermission(Permission permission) {
		/*
		 * 1. Pobierz wszystkie permissiony
		 * 2. Zrob ze zwroconej kolekcji strumien by dalo sie latwiej przetwarzac kolekcje
		 * 3. Odfiltruj kolekcje pozostawiajac w niej tylko te ktore spelniaja warunek: warunek == true to element zostaje. False => wylatuje
		 * 4. Zamien kazdy obiekt RolePermission na obiekt Role wewnatrz niego
		 * 5. Zapisz wszystko do kolekcji: ArrayList
		 */
		return getAll()
				.stream()
				.filter(rp -> rp.getPermission().getId() == permission.getId())
				.map(rp -> rp.getRole())
				.collect(Collectors.toCollection(ArrayList::new));
	}

	/*
	 * Tak samo jak u gory tylko zamiast Permission to role. Reszta bez zmian logiki.
	 */
	@Override
	public List<Permission> byRole(Role role) {
		return getAll()
				.stream()
				.filter(rp -> rp.getRole().getId() == role.getId())
				.map(rp -> rp.getPermission())
				.collect(Collectors.toCollection(ArrayList::new));
	}

	@Override
	protected void setUpdateQuery(RolePermission p) throws SQLException {
		update.setInt(1, p.getRole().getId());
		update.setInt(2, p.getPermission().getId());
		update.setInt(3, p.getId());
	}

	@Override
	protected void setInsertQuery(RolePermission p) throws SQLException {
		insert.setInt(1, p.getRole().getId());
		insert.setInt(2, p.getPermission().getId());
	}

	@Override
	protected String tableName() {
		return TABLE_NAME;
	}

	@Override
	protected String createTableSql() {
		return CREATE_TABLE_QUERY;
	}

	@Override
	protected String insertSql() {
		return INSERT_QUERY;
	}

	@Override
	protected String updateSql() {
		return UPDATE_QUERY;
	}

}
