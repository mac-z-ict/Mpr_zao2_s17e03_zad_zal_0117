package dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;
import java.util.HashSet;
import java.util.Optional;
import java.util.Set;
import java.util.function.Consumer;

import dao.mappers.IMapResultSetToEntity;
import dao.uow.IUnitOfWork;
import domain.RolePermission;
import domain.User;
import domain.UserRole;

public class UserRepository extends RepositoryBase<User> implements IUserRepository {
	
	public static final String TABLE_NAME = "user";
	private static final String CREATE_TABLE_QUERY = "CREATE TABLE "+TABLE_NAME+"("
			+ "id bigint GENERATED BY DEFAULT AS IDENTITY,"
			+ "login VARCHAR(32),"
			+ "password VARCHAR(255),"
			+ "person_id bigint"
			+ ")";
	private static final String INSERT_QUERY = "INSERT INTO "+TABLE_NAME+"(login, password, person_id) VALUES (?, ?, ?)";
	private static final String UPDATE_QUERY = "UPDATE "+TABLE_NAME+" SET login = ?, password = ?, person_id = ? WHERE id = ?";
	
	public UserRepository(Connection connection, IMapResultSetToEntity<User> mapper, IUnitOfWork uow) {
		super(connection, mapper, uow);
	}
	
	@Override
	protected void setUpdateQuery(User p) throws SQLException {
		update.setString(1, p.getLogin());
		update.setString(2, p.getPassword());
		
		// zeby dalo sie zapisac null sql-owy to trzeba zastosowac specjalna skladnie i trzeba przez to wstawic if-a
		if (p.getPerson() != null) {
			update.setInt(3, p.getPerson().getId());
		} else {
			update.setNull(3, Types.BIGINT);
		}
		update.setInt(4, p.getId());
	}

	@Override
	protected void setInsertQuery(User p) throws SQLException {
		insert.setString(1, p.getLogin());
		insert.setString(2, p.getPassword());
		// jw.
		if (p.getPerson() != null) {
			insert.setInt(3, p.getPerson().getId());
		} else {
			insert.setNull(3, Types.BIGINT);
		}
	}

	@Override
	protected String tableName() {
		return TABLE_NAME;
	}

	@Override
	protected String createTableSql() {
		return CREATE_TABLE_QUERY;
	}

	@Override
	protected String insertSql() {
		return INSERT_QUERY;
	}

	@Override
	protected String updateSql() {
		return UPDATE_QUERY;
	}

	// Zobacz analogiczna operacje w PermissionRepository
	@Override
	public User withLogin(String login) {
		//@formatter:off
		return getAll()
				.stream()
				.filter(u -> login.equals(u.getLogin()))
				.findFirst()
				.orElse(null);
		//@formatter:on
	}

	// jw.
	@Override
	public User withLoginAndPassword(String login, String password) {
		//@formatter:off
		return getAll()
				.stream()
				.filter(u -> login.equals(u.getLogin()) && password.equals(u.getPassword()))
				.findFirst()
				.orElse(null);
		//@formatter:on
	}

}
