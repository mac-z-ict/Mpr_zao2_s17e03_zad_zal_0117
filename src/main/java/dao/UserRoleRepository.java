package dao;

import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

import dao.mappers.IMapResultSetToEntity;
import dao.uow.IUnitOfWork;
import domain.Role;
import domain.User;
import domain.UserRole;

public class UserRoleRepository extends RepositoryBase<UserRole> implements IUserRoleRepository {
	
	public static final String TABLE_NAME = "user_role";
	private static final String CREATE_TABLE_QUERY = "CREATE TABLE " + TABLE_NAME + "("
			+ "id bigint GENERATED BY DEFAULT AS IDENTITY,"
			+ "user_id bigint,"
			+ "role_id bigint"
			+ ")";
	private static final String INSERT_QUERY = "INSERT INTO " + TABLE_NAME + "(user_id, role_id) VALUES(?,?)";
	private static final String UPDATE_QUERY = "UPDATE " + TABLE_NAME +" SET user_id = ?, role_id = ? WHERE id = ?";

	public UserRoleRepository(Connection connection, IMapResultSetToEntity<UserRole> mapper, IUnitOfWork uow) {
		super(connection, mapper, uow);
	}

	/*
	 * Zobacz opis w RolePermissionRepository. 
	 */
	@Override
	public List<User> byRole(Role role) {
		List<User> result = getAll()
				.stream()
				.filter(ur -> ur.getRole().getId() == role.getId())
				.map(ur -> ur.getUser())
				.collect(Collectors.toCollection(ArrayList::new));
		return result;
	}

	/* jw. */
	@Override
	public List<Role> byUser(User user) {
		List<Role> result = getAll()
						.stream()
						.filter(ur -> ur.getUser().getId() == user.getId())
						.map(ur -> ur.getRole())
						.collect(Collectors.toCollection(ArrayList::new));
		return result;
	}

	@Override
	protected void setUpdateQuery(UserRole p) throws SQLException {
		update.setInt(1, p.getUser().getId());
		update.setInt(2, p.getRole().getId());
		update.setInt(3, p.getId());
	}

	@Override
	protected void setInsertQuery(UserRole p) throws SQLException {
		insert.setInt(1, p.getUser().getId());
		insert.setInt(2, p.getRole().getId());
	}

	@Override
	protected String tableName() {
		return TABLE_NAME;
	}

	@Override
	protected String createTableSql() {
		return CREATE_TABLE_QUERY;
	}

	@Override
	protected String insertSql() {
		return INSERT_QUERY;
	}

	@Override
	protected String updateSql() {
		return UPDATE_QUERY;
	}

}
