package dao;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Types;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.stream.Collectors;

import dao.mappers.IMapResultSetToEntity;
import dao.uow.IUnitOfWork;
import dao.uow.IUnitOfWorkRepository;
import domain.Address;
import domain.Person;

public class AddressRepository extends RepositoryBase<Address> implements IAddressRepository{
	
	public final static String TABLE_NAME = "address";
	private static final String CREATE_TABLE_QUERY = "CREATE TABLE " + TABLE_NAME + "("
				+ "id bigint GENERATED BY DEFAULT AS IDENTITY,"
				+ "streetName VARCHAR(50),"
				+ "streetNumber bigint,"
				+ "houseNumber VARCHAR(10),"
				+ "city VARCHAR(50),"
				+ "postcode VARCHAR(5),"
				+ "person_id bigint"	
				+ ")";
	private static final String INSERT_QUERY = "INSERT INTO " + TABLE_NAME
				+ "(streetName, streetNumber, houseNumber, city, postcode, person_id) "
				+ "VALUES (?,?,?,?,?,?)";
	private static final String UPDATE_QUERY = "UPDATE " + TABLE_NAME + " SET streetName = ?, streetNumber = ?, houseNumber = ?, city = ?, postcode = ?, person_id = ? WHERE id = ?";
	private static final String BY_PERSON_QUERY = "SELECT A.* FROM " + TABLE_NAME + " A WHERE A.PERSON_ID = ?";
	
	private final PreparedStatement byUser;

	public AddressRepository(Connection connection,
			IMapResultSetToEntity<Address> mapper,
			IUnitOfWork uow) throws SQLException {
			super(connection, mapper, uow);
			byUser = connection.prepareStatement(BY_PERSON_QUERY);
	}
	
	protected void setUpdateQuery(Address a) throws SQLException {
		update.setString(1, a.getStreetName());
		update.setInt(2, a.getStreetNumber());
		update.setString(3, a.getHouseNumber());
		update.setString(4, a.getCity());
		update.setString(5, a.getPostcode());
		if (a.getPerson() != null) {
			update.setInt(6, a.getPerson().getId());
		} else {
			update.setNull(6, Types.BIGINT);
		}
		update.setInt(7, a.getId());
	}
	
	protected void setInsertQuery(Address a) throws SQLException {
		insert.setString(1, a.getStreetName());
		insert.setInt(2, a.getStreetNumber());
		insert.setString(3, a.getHouseNumber());
		insert.setString(4, a.getCity());
		insert.setString(5, a.getPostcode());
		if (a.getPerson() != null) {
			insert.setInt(6, a.getPerson().getId());
		} else {
			insert.setNull(6, Types.BIGINT);
		}
	}
	
	@Override
	protected String tableName() {
		return TABLE_NAME;
	}
	@Override
	protected String createTableSql() {
		return CREATE_TABLE_QUERY;
	}
	@Override
	protected String insertSql() {
		return INSERT_QUERY;
	}
	@Override
	protected String updateSql() {
		return UPDATE_QUERY;
		
	}

	public List<Address> byPerson(Person person) throws SQLException {
		//@formatter:off
		List<Address> result = new ArrayList<>();
		
		byUser.setInt(1, person.getId());
		ResultSet rs = byUser.executeQuery();
		while(rs.next()) {
			Address a = mapper.map(rs);
			a.setPerson(person);
			result.add(a);
		}
		person.setAddresses(new HashSet<>(result));
		return result;
//		return getAll()
//				.stream()
//				.filter(a -> person.equals(a.getPerson()))
//				.collect(Collectors
//						.toCollection(ArrayList::new));
		//@formatter:on
	}
	
}
