package dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;

import dao.mappers.IMapResultSetToEntity;
import dao.uow.IUnitOfWork;
import domain.Role;
import domain.User;
import domain.UserRole;

public class RoleRepository extends RepositoryBase<Role> implements IRoleRepository {
	
	public static final String TABLE_NAME = "role";
	private static final String CREATE_TABLE_QUERY = "CREATE TABLE "+TABLE_NAME+"("
			+ "id bigint GENERATED BY DEFAULT AS IDENTITY,"
			+ "name VARCHAR(32)"
			+ ")";
	private static final String INSERT_QUERY = "INSERT INTO "+TABLE_NAME+"(name) VALUES(?)";
	private static final String UPDATE_QUERY = "UPDATE "+TABLE_NAME+" SET name = ? WHERE id = ?";
	
	private static final String BY_USER_QUERY = "SELECT R.* FROM "+TABLE_NAME+" R INNER JOIN " + UserRoleRepository.TABLE_NAME + " UR ON (R.id = UR.role_id) "
			+ "WHERE UR.user_id = ?";
	
	private PreparedStatement byUser;
	

	public RoleRepository(Connection connection, IMapResultSetToEntity<Role> mapper, IUnitOfWork uow) {
		super(connection, mapper, uow);
		/*
		 * By mozna bylo wykonywac w prosty sposob dodatkowe operacje wyszukiwania utworzone zostaja 1 dodatkowe pytanie sql.
		 */
		try {
			byUser = connection.prepareStatement(BY_USER_QUERY);
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	@Override
	protected void setUpdateQuery(Role p) throws SQLException {
		update.setString(1, p.getName());
		update.setInt(2, p.getId());
	}

	@Override
	protected void setInsertQuery(Role p) throws SQLException {
		insert.setString(1, p.getName());
	}

	@Override
	protected String tableName() {
		return TABLE_NAME;
	}

	@Override
	protected String createTableSql() {
		return CREATE_TABLE_QUERY;
	}

	@Override
	protected String insertSql() {
		return INSERT_QUERY;
	}

	@Override
	protected String updateSql() {
		return UPDATE_QUERY;
	}

	
	@Override
	public List<Role> byUser(User user) {
		try {
			List<Role> roles = new ArrayList<>();
			
			byUser.setInt(1, user.getId());
			ResultSet rs = byUser.executeQuery();
			
			while(rs.next()) {
				Role role = mapper.map(rs);
				role.getUsers().add(user);
				roles.add(role);
			}
			
			user.getRoles().addAll(roles);
			
			return roles;
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return null;
	}
}
