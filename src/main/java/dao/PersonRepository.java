package dao;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;

import dao.mappers.IMapResultSetToEntity;
import dao.uow.IUnitOfWork;
import domain.Entity;
import domain.Person;
import domain.User;

public class PersonRepository extends RepositoryBase<Person> implements IPersonRepository {
	
	public static final String TABLE_NAME = "person";
	private static final String CREATE_TABLE_QUERY = "CREATE TABLE " + TABLE_NAME + "("
			+ "id bigint GENERATED BY DEFAULT AS IDENTITY,"
			+ "name VARCHAR(20),"
			+ "surname VARCHAR(50),"
			+ "age int"
			+ ")";
	private static final String INSERT_QUERY = "INSERT INTO " + TABLE_NAME + "(name, surname, age) VALUES (?,?,?)";
	private static final String UPDATE_QUERY = "UPDATE " + TABLE_NAME + " SET name = ?, surname = ?, age = ? WHERE id = ?";
	
	private static final String BY_USER_QUERY = "SELECT P.* FROM " + TABLE_NAME + " P INNER JOIN " + UserRepository.TABLE_NAME + " U ON(U.PERSON_ID = P.ID) WHERE U.ID = ?";
	
	private PreparedStatement byUser;

	public PersonRepository(Connection connection, IMapResultSetToEntity<Person> mapper, IUnitOfWork uow) {
		super(connection,mapper, uow);
		try {
			byUser = connection.prepareStatement(BY_USER_QUERY);
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public void setUpdateQuery(Person p) throws SQLException {
		update.setString(1, p.getName());
		update.setString(2, p.getSurname());
		update.setInt(3, p.getAge());
		update.setInt(4, p.getId());
	}

	public void setInsertQuery(Person p) throws SQLException {
		insert.setString(1, p.getName());
		insert.setString(2, p.getSurname());
		insert.setInt(3, p.getAge());
	}

	@Override
	protected String tableName() {
		return TABLE_NAME;
	}

	protected String createTableSql() {
		return CREATE_TABLE_QUERY;
	}

	protected String insertSql() {
		return INSERT_QUERY;
	}

	protected String updateSql() {
		return UPDATE_QUERY;
	}

	// analogiczna operacje w PermissionRepository
	public List<Person> withName(String name) {
		//@formatter:off
		return getAll()
				.stream()
				.filter(p -> name.equals(p.getName()))
				.collect(Collectors
						.toCollection(ArrayList::new));
		//@formatter:on
	}

	// jw.
	@Override
	public Person byUser(User user) {
		try {
			byUser.setInt(1, user.getId());
			ResultSet rs = byUser.executeQuery();
			if (rs.next()) {
				Person p = mapper.map(rs);
				user.setPerson(p);
				p.setUser(user);
				return p;
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return null;
	}
	

}
